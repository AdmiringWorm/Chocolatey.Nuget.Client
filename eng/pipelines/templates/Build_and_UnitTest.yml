steps:  
- task: PowerShell@1
  displayName: "Update Build Number"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
      gci env:* | sort-object name

- task: NuGetToolInstaller@0
  displayName: "Use NuGet 4.6.2"
  inputs:
    versionSpec: "4.6.2"

- task: PowerShell@1
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
    arguments: "-Force -CI"
  displayName: "Run Configure.ps1"

- task: PowerShell@1
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
    arguments: "-BuildRTM $(BuildRTM)"
  displayName: "Configure VSTS CI Environment"

- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      gci env:* | sort-object name

- task: MicroBuildLocalizationPlugin@1
  displayName: "Install Localization Plugin"

- task: MicroBuildSigningPlugin@1
  inputs:
    signType: "$(SigningType)"
    esrpSigning: "true"
  displayName: "Install Signing Plugin"

- task: MicroBuildSwixPlugin@1
  displayName: "Install Swix Plugin"

- task: MSBuild@1
  displayName: "Restore for VS2017"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber) /p:BuildRTM=$(BuildRTM) /v:m"

- task: MSBuild@1
  displayName: "Build for VS2017"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:BuildVS15NoVSIX /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

- task: PowerShell@1
  displayName: "Find packages folder"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      if (Test-Path $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)) {
        cd $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
        pwd
        ls
        echo 'change to work dir'
        cd $env:BUILD_REPOSITORY_LOCALPATH
        pwd
        ls
        dotnet nuget locals all -l
        echo 'see packages folder'
        $packagesPath = Join-Path -Path $env:BUILD_REPOSITORY_LOCALPATH -ChildPath 'packages'
        cd $packagesPath
        ls
      } else {
        echo "Path doesn't exist" $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
      }

      
- task: MSBuild@1
  displayName: "Run unit tests"
  continueOnError: "true"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:CoreUnitTests;UnitTestsVS15 /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk  /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber) /p:TestResultOutputFormat=xml"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "*.xml"
    testRunTitle: "NuGet.Client Unit Tests On Windows"
    searchFolder: "$(Build.Repository.LocalPath)\\build\\TestResults"
    mergeTestResults: "true"
    publishRunAttachments: "false"
  condition: "and(succeededOrFailed(),eq(variables['BuildRTM'], 'true'))"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Unit Tests On Windows"
  condition: "and(not(eq(variables['ManualGitHubChecks'], 'false')), eq(variables['BuildRTM'], 'true'))"

- task: PublishBuildArtifacts@1
  displayName: "Publish NuGet.CommandLine.Test as artifact"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\$(BuildConfiguration)\\net46\\win7-x64"
    ArtifactName: "NuGet.CommandLine.Test"
    ArtifactType: "Container"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

- task: MSBuild@1
  displayName: "Localize Assemblies"
  inputs:
    solution: "build\\loc.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: MSBuild@1
  displayName: "Sign Assemblies"
  inputs:
    solution: "build\\sign.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild /bl:$(Build.Repository.LocalPath)\\binlogs\\AssemblySign.binlog"

- task: PublishPipelineArtifact@1
  displayName: "Publish binlogs"
  inputs:
    artifactName: binlog - $(System.JobDisplayName) - Attempt $(System.JobAttempt)
    targetPath: "$(Build.Repository.LocalPath)\\binlogs"

- task: PowerShell@1
  displayName: "Find packages folder2"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      if (Test-Path $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)) {
        cd $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
        pwd
        ls
        echo 'change to work dir'
        cd $env:BUILD_REPOSITORY_LOCALPATH
        pwd
        ls
        dotnet nuget locals all -l
        echo 'see packages folder'
        $packagesPath = Join-Path -Path $env:BUILD_REPOSITORY_LOCALPATH -ChildPath 'packages'
        cd $packagesPath
        ls
      } else {
        echo "Path doesn't exist" $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
      }

- task: MSBuild@1
  displayName: "Pack Nupkgs"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

- task: PowerShell@1
  displayName: "Find packages folder3"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      if (Test-Path $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)) {
        cd $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
        pwd
        ls
        echo 'change to work dir'
        cd $env:BUILD_REPOSITORY_LOCALPATH
        pwd
        ls
        dotnet nuget locals all -l
        echo 'see packages folder'
        $packagesPath = Join-Path -Path $env:BUILD_REPOSITORY_LOCALPATH -ChildPath 'packages'
        cd $packagesPath
        ls
      } else {
        echo "Path doesn't exist" $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
      }

- task: MSBuild@1
  displayName: "Pack VSIX"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:BuildVS15VSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

- task: MSBuild@1
  displayName: "Generate Build Tools package"
  inputs:
    solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true"
  condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: "Find packages folder4"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      if (Test-Path $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)) {
        cd $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
        pwd
        ls
        echo 'change to work dir'
        cd $env:BUILD_REPOSITORY_LOCALPATH
        pwd
        ls
        dotnet nuget locals all -l
        echo 'see packages folder'
        $packagesPath = Join-Path -Path $env:BUILD_REPOSITORY_LOCALPATH -ChildPath 'packages'
        cd $packagesPath
        ls
      } else {
        echo "Path doesn't exist" $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
      }

- task: MSBuild@1
  displayName: "Sign Nupkgs and VSIX"
  inputs:
    solution: "build\\sign.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

- task: NuGetCommand@2
  displayName: "Verify Nupkg Signatures"
  inputs:
    command: "custom"
    arguments: "verify -Signatures $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)\\*.nupkg"

- task: PowerShell@1
  displayName: "Find packages folder5"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      if (Test-Path $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)) {
        cd $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
        pwd
        ls
        echo 'change to work dir'
        cd $env:BUILD_REPOSITORY_LOCALPATH
        pwd
        ls
        dotnet nuget locals all -l
        echo 'see packages folder'
        $packagesPath = Join-Path -Path $env:BUILD_REPOSITORY_LOCALPATH -ChildPath 'packages'
        cd $packagesPath
        ls
      } else {
        echo "Path doesn't exist" $(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)
      }

- task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@1
  displayName: Verify Assembly Signatures and StrongName
  inputs:
    TargetFolder: '$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)'

- task: PublishPipelineArtifact@1
  displayName: "Publish nupkgs"
  inputs:
    targetPath: "$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir)"
    artifactName: "nupkgs - $(RtmLabel)"
  condition: and(succeeded(), or(eq(variables['IsOfficialBuild'], 'true'), eq(variables['BuildRTM'], 'true')))  #skip this task for nonRTM in private build

- task: MSBuild@1
  displayName: "Generate VSMAN file for NuGet Core VSIX"
  inputs:
    solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: MSBuild@1
  displayName: "Generate VSMAN file for Build Tools VSIX"
  inputs:
    solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: PowerShell@1
  displayName: "Create EndToEnd Test Package"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
    arguments: "-c $(BuildConfiguration) -tv 15 -out $(Build.Repository.LocalPath)\\artifacts\\VS15 -NuGetToolsPath $(NuGetCIToolsFolder)"
    failOnStandardError: "false"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: CopyFiles@2
  displayName: "Copy NuGet.exe, VSIX and EndToEnd"
  inputs:
    SourceFolder: "artifacts"
    Contents: |
      $(VsixPublishDir)\\NuGet.exe
      $(VsixPublishDir)\\NuGet.pdb
      $(VsixPublishDir)\\NuGet.Mssign.exe
      $(VsixPublishDir)\\NuGet.Mssign.pdb
      $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.Core.json 
      $(VsixPublishDir)\\NuGet.Tools.vsix
      $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.vsix
      $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.BuildTools.json
      $(VsixPublishDir)\\EndToEnd.zip 
    TargetFolder: "$(BuildOutputTargetPath)\\artifacts"

- task: PublishBuildArtifacts@1
  displayName: "Publish NuGet.exe VSIX and EndToEnd.zip as artifact"
  inputs:
    PathtoPublish: "$(Build.Repository.LocalPath)\\artifacts\\$(VsixPublishDir)"
    ArtifactName: "VS15"
    ArtifactType: "Container"
  condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

- task: CopyFiles@2
  displayName: "Copy LCG Files"
  inputs:
    SourceFolder: "artifacts\\"
    Contents: "**\\*.lcg"
    TargetFolder: "$(CIRoot)\\PLOC\\$(Build.SourceBranchName)\\$(Build.BuildNumber)"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

- task: PowerShell@1
  displayName: "Publish Artifacts to MyGet"
  continueOnError: "true"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\PublishArtifactsFromVsts.ps1"
    arguments: "-NuGetBuildFeedUrl $(NuGetBuildFeed) -NuGetBuildSymbolsFeedUrl $(NuGetBuildSymbolsFeed) -DotnetCoreFeedUrl $(DotnetCoreBuildFeed) -DotnetCoreSymbolsFeedUrl $(DotnetCoreSymbolsFeed) -NuGetBuildFeedApiKey $(NuGetBuildApiKey) -DotnetCoreFeedApiKey $(DotnetCoreFeedApiKey)"
    failOnStandardError: "true"
  condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

- task: MSBuild@1
  displayName: "Collect Build Symbols"
  inputs:
    solution: "build\\symbols.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/p:IsSymbolBuild=true"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "
  
- task: CopyFiles@2
  displayName: "Copy Symbols"
  inputs:
    SourceFolder: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
    Contents: "**\\*"
    TargetFolder: "$(BuildOutputTargetPath)\\symbols"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "      

- task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
  displayName: "Publish Symbols on Symweb"
  inputs:
    symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
    requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/$(TeamName)/BuildId/$(Build.BuildId)"
    sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
    detailedLog: "true"
    expirationInDays: "45"
    usePat: "false"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "  	

- task: MicroBuildUploadVstsDropFolder@1
  displayName: "Upload VSTS Drop"
  inputs:
    DropFolder: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
  condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

- task: PowerShell@1
  displayName: "LocValidation: Verify VSIX"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
    arguments: "-BuildRTM $(BuildRTM) -RepoRoot $(Build.Repository.LocalPath) -OutputLogsBasePath $(Build.Repository.LocalPath)\\logs -TmpPath $(Agent.TempDirectory) -ValidateVsix"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PowerShell@1
  displayName: "LocValidation: Verify Artifacts"
  inputs:
    scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
    arguments: "-BuildRTM $(BuildRTM) -RepoRoot $(Build.Repository.LocalPath) -OutputLogsBasePath $(Build.Repository.LocalPath)\\logs"
  condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

- task: PublishPipelineArtifact@1
  displayName: "LocValidation: Publish Logs as an artifact"
  inputs:
    artifactName: LocValidationLogs
    targetPath: "$(Build.Repository.LocalPath)\\logs\\LocalizationValidation"
  condition: "eq(variables['BuildRTM'], 'false')"

- task: MicroBuildCleanup@1
  displayName: "Perform Cleanup Tasks"

- task: PowerShell@1
  displayName: "Cleanup on Failure"
  inputs:
    scriptType: "inlineScript"
    arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
    inlineScript: |
      param([string]$BuildOutputTargetPath)
      Get-ChildItem $(BuildOutputTargetPath) -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
      Remove-Item -Path $(BuildOutputTargetPath) -Force -Recurse -ErrorAction SilentlyContinue
  condition: "eq(variables['Agent.JobStatus'], 'Failed')"
