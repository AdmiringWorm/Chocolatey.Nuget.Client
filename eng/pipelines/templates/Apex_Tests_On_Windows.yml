steps:
- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
      gci env:* | sort-object name

- task: DownloadBuildArtifacts@0
  displayName: "Download Build artifacts"
  inputs:
    artifactName: "VS15"
    downloadPath: "$(Build.Repository.LocalPath)/artifacts"
      
- task: NuGetToolInstaller@0
  displayName: "Use NuGet 4.5.0"
  inputs:
    versionSpec: "4.5.0"

- task: NuGetCommand@2
  displayName: "Download packages.config packages"
  inputs:
    restoreSolution: ".nuget/packages.config"
    feedsToUse: "config"
    nugetConfigPath: "NuGet.Config"
    restoreDirectory: "$(System.DefaultWorkingDirectory)/packages"

- task: PowerShell@1
  displayName: "Bootstrap.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

- task: PowerShell@1
  displayName: "SetupFunctionalTests.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
    arguments: "-VSVersion 15.0"

- task: PowerShell@1
  displayName: "InstallNuGetVSIX.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 15.0"
    failOnStandardError: "false"

# - task: PowerShell@1
#   displayName: "Collect VS Logs"
#   inputs:
#     scriptType: "inlineScript"
#     inlineScript: |
#       Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
#       if(-not (Test-Path $(EndToEndResultsDropPath)))
#         {
#           New-Item -Path $(EndToEndResultsDropPath) -ItemType Directory -Force
#         }
#       $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(EndToEndResultsDropPath)\\apex-collectlogs.zip
#   condition: "failed()"

- task: MSBuild@1
  displayName: "Restore for VS2017"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber)"
    
- task: NuGetCommand@2
  displayName: "Add Apex Feed Source"
  inputs:
    command: "custom"
    arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

- task: MSBuild@1
  displayName: "Restore Apex Tests"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber)"

- task: MSBuild@1
  displayName: "Run Apex Tests"
  timeoutInMinutes: 45
  continueOnError: "true"
  inputs:
    solution: "build\\build.proj"
    msbuildVersion: "15.0"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml  /p:NUGET_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(System.DefaultWorkingDirectory)\\keys\\35MSSharedLib1024.snk /p:BuildNumber=$(BuildNumber)"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "*.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
    mergeTestResults: "true"
    testRunTitle: "NuGet.Client Apex Tests On Windows"
  condition: "succeededOrFailed()"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "Apex Tests On Windows"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PowerShell@1
  displayName: "Kill running instances of DevEnv"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
      KillRunningInstancesOfVS
  condition: "always()"
