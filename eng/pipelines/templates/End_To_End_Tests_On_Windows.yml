steps:
- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Write-Host "##vso[build.updatebuildnumber]$env:FullVstsBuildNumber"
      gci env:* | sort-object name      

- task: DownloadBuildArtifacts@0
  displayName: "Download Build artifacts"
  inputs:
    artifactName: "VS15"
    downloadPath: "$(Build.Repository.LocalPath)/artifacts"

- task: PowerShell@1
  displayName: "Bootstrap.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/Bootstrap.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

- task: PowerShell@1
  displayName: "SetupFunctionalTests.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\SetupFunctionalTests.ps1"
    arguments: "-VSVersion 15.0"

- task: PowerShell@1
  displayName: "CopyToolsAndSetupMachine.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\CopyToolsAndSetupMachine.ps1"
    arguments: " -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts"

- task: PowerShell@1
  displayName: "InstallNuGetVSIX.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1"
    arguments: "-NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -NuGetVSIXID $(NuGetVsixId) -ProcessExitTimeoutInSeconds 180 -VSVersion 15.0"
    failOnStandardError: "false"

- task: PowerShell@1
  displayName: "Collect VS Logs"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Invoke-WebRequest -Uri $(CollectExeUrl) -OutFile $(System.DefaultWorkingDirectory)\\VSCollect.exe
      $(System.DefaultWorkingDirectory)\\VSCollect.exe -zip:$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\e2e-collectlogs.zip
  condition: "failed()"

- task: PowerShell@1
  displayName: "RunFunctionalTests.ps1"    
  timeoutInMinutes: 75
  continueOnError: "true"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)\\artifacts\\EndToEnd\\scripts\\RunFunctionalTests.ps1"
    arguments: "-PMCCommand $(EndToEndTestCommandToRun) -PMCLaunchWaitTimeInSecs 30 -EachTestTimoutInSecs 600 -NuGetDropPath $(System.DefaultWorkingDirectory)\\artifacts -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -RunCounter $(Build.BuildNumber) -VSVersion 15.0"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "JUnit"
    testResultsFiles: "*.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)\\testresults"
    mergeTestResults: "true"
    testRunTitle: "NuGet.Client EndToEnd Tests On Windows"
  condition: "succeededOrFailed()"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    arguments: "-VstsPersonalAccessToken $(VstsPersonalAccessToken)"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(VstsPersonalAccessToken) -CommitSha $(Build.SourceVersion) -TestName "EndToEnd Tests On Windows"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PowerShell@1
  displayName: "Kill running instances of DevEnv"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
      KillRunningInstancesOfVS
  condition: "always()"
