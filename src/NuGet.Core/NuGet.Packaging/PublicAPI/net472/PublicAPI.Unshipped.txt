NuGet.Client.ManagedCodeConventions.ManagedCodeCriteria.ForFramework(Chocolatey.NuGet.Frameworks.NuGetFramework framework) -> NuGet.ContentModel.SelectionCriteria
NuGet.Client.ManagedCodeConventions.ManagedCodeCriteria.ForFrameworkAndRuntime(Chocolatey.NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier) -> NuGet.ContentModel.SelectionCriteria
NuGet.Packaging.FrameworkAssemblyReference.FrameworkAssemblyReference(string assemblyName, System.Collections.Generic.IEnumerable<Chocolatey.NuGet.Frameworks.NuGetFramework> supportedFrameworks) -> void
NuGet.Packaging.FrameworkAssemblyReference.SupportedFrameworks.get -> System.Collections.Generic.IEnumerable<Chocolatey.NuGet.Frameworks.NuGetFramework>
NuGet.Packaging.FrameworkReferenceGroup.FrameworkReferenceGroup(Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.Packaging.FrameworkReference> frameworkReferences) -> void
NuGet.Packaging.FrameworkReferenceGroup.TargetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.FrameworkSpecificGroup.FrameworkSpecificGroup(Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<string> items) -> void
NuGet.Packaging.FrameworkSpecificGroup.TargetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.IPackageFile.NuGetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException.NuGetLicenseExpressionParsingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NuGet.Packaging.NuspecReader.NuspecReader(System.IO.Stream stream, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, bool leaveStreamOpen) -> void
NuGet.Packaging.NuspecReader.NuspecReader(System.Xml.Linq.XDocument xml, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
NuGet.Packaging.NuspecReader.NuspecReader(string path, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Compression.ZipArchive zipArchive, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Stream stream, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Stream stream, bool leaveStreamOpen, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(string filePath, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider = null, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider = null) -> void
NuGet.Packaging.PackageBuilder.TargetFrameworks.get -> System.Collections.Generic.IList<Chocolatey.NuGet.Frameworks.NuGetFramework>
NuGet.Packaging.PackageDependencyGroup.PackageDependencyGroup(Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.Packaging.Core.PackageDependency> packages) -> void
NuGet.Packaging.PackageDependencyGroup.TargetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.PackageFolderReader.PackageFolderReader(System.IO.DirectoryInfo folder, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageFolderReader.PackageFolderReader(string folderPath, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageReaderBase.CompatibilityProvider.get -> Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider
NuGet.Packaging.PackageReaderBase.FrameworkProvider.get -> Chocolatey.NuGet.Frameworks.IFrameworkNameProvider
NuGet.Packaging.PackageReaderBase.GetFrameworkFromPath(string path, bool allowSubFolders = false) -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.PackageReaderBase.PackageReaderBase(Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
NuGet.Packaging.PackageReaderBase.PackageReaderBase(Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, Chocolatey.NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled) -> void
NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled, bool developmentDependency, bool requireReinstallation) -> void
NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled, bool developmentDependency, bool requireReinstallation, NuGet.Versioning.VersionRange allowedVersions) -> void
NuGet.Packaging.PackageReference.TargetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.PackageReferenceSet.PackageReferenceSet(Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<string> references) -> void
NuGet.Packaging.PackageReferenceSet.TargetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.PackagesConfigReader.PackagesConfigReader(Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkMappings, System.IO.Stream stream, bool leaveStreamOpen) -> void
NuGet.Packaging.PackagesConfigReader.PackagesConfigReader(Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkMappings, System.Xml.Linq.XDocument xml) -> void
NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(string packageId, NuGet.Versioning.NuGetVersion version, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.Packaging.PackagesConfigWriter.PackagesConfigWriter(System.IO.Stream stream, bool createNew, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkMappings) -> void
NuGet.Packaging.PackagesConfigWriter.PackagesConfigWriter(string fullPath, bool createNew, Chocolatey.NuGet.Frameworks.IFrameworkNameProvider frameworkMappings) -> void
NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity identity, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(string packageId, NuGet.Versioning.NuGetVersion version, Chocolatey.NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.Packaging.PhysicalPackageFile.NuGetFramework.get -> Chocolatey.NuGet.Frameworks.NuGetFramework
NuGet.Packaging.Signing.X509TrustStore
NuGet.RuntimeModel.CompatibilityProfile.CompatibilityProfile(string name, System.Collections.Generic.IEnumerable<Chocolatey.NuGet.Frameworks.FrameworkRuntimePair> restoreContexts) -> void
NuGet.RuntimeModel.CompatibilityProfile.RestoreContexts.get -> System.Collections.Generic.IList<Chocolatey.NuGet.Frameworks.FrameworkRuntimePair>
static NuGet.Packaging.FrameworkNameUtility.ParseNuGetFrameworkFolderName(string path, bool strictParsing, out string effectivePath) -> Chocolatey.NuGet.Frameworks.NuGetFramework
static NuGet.Packaging.FrameworkNameUtility.ParseNuGetFrameworkFromFilePath(string filePath, out string effectivePath) -> Chocolatey.NuGet.Frameworks.NuGetFramework
static NuGet.Packaging.FrameworksExtensions.GetFrameworkString(this Chocolatey.NuGet.Frameworks.NuGetFramework self) -> string
static NuGet.Packaging.Signing.X509TrustStore.InitializeForDotNetSdk(NuGet.Common.ILogger logger) -> void
NuGet.Packaging.NuspecReader.GetBugTrackerUrl() -> string
NuGet.Packaging.NuspecReader.GetConflicts() -> string
NuGet.Packaging.NuspecReader.GetDocsUrl() -> string
NuGet.Packaging.NuspecReader.GetMailingListUrl() -> string
NuGet.Packaging.NuspecReader.GetPackageSourceUrl() -> string
NuGet.Packaging.NuspecReader.GetProjectSourceUrl() -> string
NuGet.Packaging.NuspecReader.GetProvides() -> string
NuGet.Packaging.NuspecReader.GetReplaces() -> string
NuGet.Packaging.NuspecReader.GetSoftwareDisplayName() -> string
NuGet.Packaging.NuspecReader.GetSoftwareDisplayVersion() -> string
NuGet.Packaging.NuspecReader.GetWikiUrl() -> string
NuGet.Packaging.IPackageMetadata.BugTrackerUrl.get -> System.Uri
NuGet.Packaging.IPackageMetadata.Conflicts.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.IPackageMetadata.DocsUrl.get -> System.Uri
NuGet.Packaging.IPackageMetadata.MailingListUrl.get -> System.Uri
NuGet.Packaging.IPackageMetadata.PackageSourceUrl.get -> System.Uri
NuGet.Packaging.IPackageMetadata.ProjectSourceUrl.get -> System.Uri
NuGet.Packaging.IPackageMetadata.Provides.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.IPackageMetadata.Replaces.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.IPackageMetadata.SoftwareDisplayName.get -> string
NuGet.Packaging.IPackageMetadata.SoftwareDisplayVersion.get -> string
NuGet.Packaging.IPackageMetadata.WikiUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.BugTrackerUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.Conflicts.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.ManifestMetadata.Conflicts.set -> void
NuGet.Packaging.ManifestMetadata.DocsUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.MailingListUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.PackageSourceUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.ProjectSourceUrl.get -> System.Uri
NuGet.Packaging.ManifestMetadata.Provides.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.ManifestMetadata.Provides.set -> void
NuGet.Packaging.ManifestMetadata.Replaces.get -> System.Collections.Generic.IEnumerable<string>
NuGet.Packaging.ManifestMetadata.Replaces.set -> void
NuGet.Packaging.ManifestMetadata.SetBugTrackerUrl(string bugTrackerUrl) -> void
NuGet.Packaging.ManifestMetadata.SetDocsUrl(string docsUrl) -> void
NuGet.Packaging.ManifestMetadata.SetMailingListUrl(string mailingListUrl) -> void
NuGet.Packaging.ManifestMetadata.SetPackageSourceUrl(string packageSourceUrl) -> void
NuGet.Packaging.ManifestMetadata.SetProjectSourceUrl(string projectSourceUrl) -> void
NuGet.Packaging.ManifestMetadata.SetWikiUrl(string wikiUrl) -> void
NuGet.Packaging.ManifestMetadata.SoftwareDisplayName.get -> string
NuGet.Packaging.ManifestMetadata.SoftwareDisplayName.set -> void
NuGet.Packaging.ManifestMetadata.SoftwareDisplayVersion.get -> string
NuGet.Packaging.ManifestMetadata.SoftwareDisplayVersion.set -> void
NuGet.Packaging.ManifestMetadata.WikiUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.PackageSourceUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.PackageSourceUrl.set -> void
NuGet.Packaging.PackageBuilder.ProjectSourceUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.ProjectSourceUrl.set -> void
NuGet.Packaging.PackageBuilder.DocsUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.DocsUrl.set -> void
NuGet.Packaging.PackageBuilder.Replaces.get -> System.Collections.Generic.ISet<string>
NuGet.Packaging.PackageBuilder.Replaces.set -> void
NuGet.Packaging.PackageBuilder.Provides.get -> System.Collections.Generic.ISet<string>
NuGet.Packaging.PackageBuilder.Provides.set -> void
NuGet.Packaging.PackageBuilder.Conflicts.get -> System.Collections.Generic.ISet<string>
NuGet.Packaging.PackageBuilder.Conflicts.set -> void
NuGet.Packaging.PackageBuilder.SoftwareDisplayName.get -> string
NuGet.Packaging.PackageBuilder.SoftwareDisplayName.set -> void
NuGet.Packaging.PackageBuilder.SoftwareDisplayVersion.get -> string
NuGet.Packaging.PackageBuilder.SoftwareDisplayVersion.set -> void
NuGet.Packaging.PackageBuilder.WikiUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.WikiUrl.set -> void
NuGet.Packaging.PackageBuilder.MailingListUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.MailingListUrl.set -> void
NuGet.Packaging.PackageBuilder.BugTrackerUrl.get -> System.Uri
NuGet.Packaging.PackageBuilder.BugTrackerUrl.set -> void
virtual NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks() -> System.Collections.Generic.IEnumerable<Chocolatey.NuGet.Frameworks.NuGetFramework>
*REMOVED* NuGet.Client.ManagedCodeConventions.ManagedCodeCriteria.ForFramework(NuGet.Frameworks.NuGetFramework framework) -> NuGet.ContentModel.SelectionCriteria
*REMOVED* NuGet.Client.ManagedCodeConventions.ManagedCodeCriteria.ForFrameworkAndRuntime(NuGet.Frameworks.NuGetFramework framework, string runtimeIdentifier) -> NuGet.ContentModel.SelectionCriteria
*REMOVED* NuGet.Packaging.FrameworkAssemblyReference.FrameworkAssemblyReference(string assemblyName, System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework> supportedFrameworks) -> void
*REMOVED* NuGet.Packaging.FrameworkAssemblyReference.SupportedFrameworks.get -> System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>
*REMOVED* NuGet.Packaging.FrameworkReferenceGroup.FrameworkReferenceGroup(NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.Packaging.FrameworkReference> frameworkReferences) -> void
*REMOVED* NuGet.Packaging.FrameworkReferenceGroup.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.FrameworkSpecificGroup.FrameworkSpecificGroup(NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<string> items) -> void
*REMOVED* NuGet.Packaging.FrameworkSpecificGroup.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.IPackageFile.NuGetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.NuspecReader.NuspecReader(System.IO.Stream stream, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, bool leaveStreamOpen) -> void
*REMOVED* NuGet.Packaging.NuspecReader.NuspecReader(System.Xml.Linq.XDocument xml, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
*REMOVED* NuGet.Packaging.NuspecReader.NuspecReader(string path, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
*REMOVED* NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Compression.ZipArchive zipArchive, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Stream stream, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(System.IO.Stream stream, bool leaveStreamOpen, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageArchiveReader.PackageArchiveReader(string filePath, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider = null, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider = null) -> void
*REMOVED* NuGet.Packaging.PackageBuilder.TargetFrameworks.get -> System.Collections.Generic.IList<NuGet.Frameworks.NuGetFramework>
*REMOVED* NuGet.Packaging.PackageDependencyGroup.PackageDependencyGroup(NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<NuGet.Packaging.Core.PackageDependency> packages) -> void
*REMOVED* NuGet.Packaging.PackageDependencyGroup.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.PackageFolderReader.PackageFolderReader(System.IO.DirectoryInfo folder, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageFolderReader.PackageFolderReader(string folderPath, NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, ChocolateyNuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageReaderBase.CompatibilityProvider.get -> NuGet.Frameworks.IFrameworkCompatibilityProvider
*REMOVED* NuGet.Packaging.PackageReaderBase.FrameworkProvider.get -> NuGet.Frameworks.IFrameworkNameProvider
*REMOVED* NuGet.Packaging.PackageReaderBase.GetFrameworkFromPath(string path, bool allowSubFolders = false) -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.PackageReaderBase.PackageReaderBase(NuGet.Frameworks.IFrameworkNameProvider frameworkProvider) -> void
*REMOVED* NuGet.Packaging.PackageReaderBase.PackageReaderBase(NuGet.Frameworks.IFrameworkNameProvider frameworkProvider, NuGet.Frameworks.IFrameworkCompatibilityProvider compatibilityProvider) -> void
*REMOVED* NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework) -> void
*REMOVED* NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled) -> void
*REMOVED* NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled, bool developmentDependency, bool requireReinstallation) -> void
*REMOVED* NuGet.Packaging.PackageReference.PackageReference(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework, bool userInstalled, bool developmentDependency, bool requireReinstallation, NuGet.Versioning.VersionRange allowedVersions) -> void
*REMOVED* NuGet.Packaging.PackageReference.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.PackageReferenceSet.PackageReferenceSet(NuGet.Frameworks.NuGetFramework targetFramework, System.Collections.Generic.IEnumerable<string> references) -> void
*REMOVED* NuGet.Packaging.PackageReferenceSet.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.Packaging.PackagesConfigReader.PackagesConfigReader(NuGet.Frameworks.IFrameworkNameProvider frameworkMappings, System.IO.Stream stream, bool leaveStreamOpen) -> void
*REMOVED* NuGet.Packaging.PackagesConfigReader.PackagesConfigReader(NuGet.Frameworks.IFrameworkNameProvider frameworkMappings, System.Xml.Linq.XDocument xml) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(string packageId, NuGet.Versioning.NuGetVersion version, NuGet.Frameworks.NuGetFramework targetFramework) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.PackagesConfigWriter(System.IO.Stream stream, bool createNew, NuGet.Frameworks.IFrameworkNameProvider frameworkMappings) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.PackagesConfigWriter(string fullPath, bool createNew, NuGet.Frameworks.IFrameworkNameProvider frameworkMappings) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework targetFramework) -> void
*REMOVED* NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(string packageId, NuGet.Versioning.NuGetVersion version, NuGet.Frameworks.NuGetFramework targetFramework) -> void
*REMOVED* NuGet.Packaging.PhysicalPackageFile.NuGetFramework.get -> NuGet.Frameworks.NuGetFramework
*REMOVED* NuGet.RuntimeModel.CompatibilityProfile.CompatibilityProfile(string name, System.Collections.Generic.IEnumerable<NuGet.Frameworks.FrameworkRuntimePair> restoreContexts) -> void
*REMOVED* NuGet.RuntimeModel.CompatibilityProfile.RestoreContexts.get -> System.Collections.Generic.IList<NuGet.Frameworks.FrameworkRuntimePair>
*REMOVED* static NuGet.Packaging.FrameworkNameUtility.ParseNuGetFrameworkFolderName(string path, bool strictParsing, out string effectivePath) -> NuGet.Frameworks.NuGetFramework
*REMOVED* static NuGet.Packaging.FrameworkNameUtility.ParseNuGetFrameworkFromFilePath(string filePath, out string effectivePath) -> NuGet.Frameworks.NuGetFramework
*REMOVED* static NuGet.Packaging.FrameworksExtensions.GetFrameworkString(this NuGet.Frameworks.NuGetFramework self) -> string
*REMOVED* virtual NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks() -> System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>
*REMOVED* virtual NuGet.Packaging.PackageReaderBase.GetSupportedFrameworksAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>>
virtual NuGet.Packaging.PackageReaderBase.GetSupportedFrameworksAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Chocolatey.NuGet.Frameworks.NuGetFramework>>
