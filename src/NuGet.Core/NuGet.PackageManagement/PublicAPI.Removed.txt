NuGet.PackageManagement.GatherCache.AddAllPackagesForId(NuGet.Configuration.PackageSource source, string packageId, NuGet.Frameworks.NuGetFramework framework, System.Collections.Generic.List<NuGet.Protocol.Core.Types.SourcePackageDependencyInfo> packages) -> void
NuGet.PackageManagement.GatherCache.AddPackageFromSingleVersionLookup(NuGet.Configuration.PackageSource source, NuGet.Packaging.Core.PackageIdentity identity, NuGet.Frameworks.NuGetFramework framework, NuGet.Protocol.Core.Types.SourcePackageDependencyInfo package) -> void
NuGet.PackageManagement.GatherCache.GetPackage(NuGet.Configuration.PackageSource source, NuGet.Packaging.Core.PackageIdentity package, NuGet.Frameworks.NuGetFramework framework) -> NuGet.PackageManagement.GatherCacheResult
NuGet.PackageManagement.GatherCache.GetPackages(NuGet.Configuration.PackageSource source, string packageId, NuGet.Frameworks.NuGetFramework framework) -> NuGet.PackageManagement.GatherCacheResult
NuGet.PackageManagement.GatherContext.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
NuGet.ProjectManagement.BuildIntegratedInstallationContext.BuildIntegratedInstallationContext(System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework> successfulFrameworks, System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework> unsucessfulFrameworks, System.Collections.Generic.IDictionary<NuGet.Frameworks.NuGetFramework, string> originalFrameworks) -> void
NuGet.ProjectManagement.BuildIntegratedInstallationContext.OriginalFrameworks.get -> System.Collections.Generic.IDictionary<NuGet.Frameworks.NuGetFramework, string>
NuGet.ProjectManagement.BuildIntegratedInstallationContext.SuccessfulFrameworks.get -> System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>
NuGet.ProjectManagement.BuildIntegratedInstallationContext.UnsuccessfulFrameworks.get -> System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>
NuGet.ProjectManagement.BuildIntegratedPackageReference.BuildIntegratedPackageReference(NuGet.LibraryModel.LibraryDependency dependency, NuGet.Frameworks.NuGetFramework projectFramework) -> void
NuGet.ProjectManagement.BuildIntegratedPackageReference.BuildIntegratedPackageReference(NuGet.LibraryModel.LibraryDependency dependency, NuGet.Frameworks.NuGetFramework projectFramework, NuGet.Packaging.Core.PackageIdentity installedVersion) -> void
NuGet.ProjectManagement.FolderNuGetProject.FolderNuGetProject(string root, NuGet.Packaging.PackagePathResolver packagePathResolver, NuGet.Frameworks.NuGetFramework targetFramework) -> void
NuGet.ProjectManagement.IMSBuildProjectSystem.TargetFramework.get -> NuGet.Frameworks.NuGetFramework
NuGet.ProjectManagement.IProjectSystemReferencesReader.GetPackageReferencesAsync(NuGet.Frameworks.NuGetFramework targetFramework, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.LibraryModel.LibraryDependency>>
NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject.IsUAPFramework(NuGet.Frameworks.NuGetFramework framework) -> bool
static NuGet.PackageManagement.NuGetPackageManager.GetLatestVersionAsync(NuGet.Packaging.PackageReference package, NuGet.Frameworks.NuGetFramework framework, NuGet.PackageManagement.ResolutionContext resolutionContext, System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.SourceRepository> sources, NuGet.Common.ILogger log, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<NuGet.PackageManagement.ResolvedPackage>
static NuGet.PackageManagement.NuGetPackageManager.GetLatestVersionAsync(string packageId, NuGet.Frameworks.NuGetFramework framework, NuGet.PackageManagement.ResolutionContext resolutionContext, NuGet.Protocol.Core.Types.SourceRepository primarySourceRepository, NuGet.Common.ILogger log, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<NuGet.PackageManagement.ResolvedPackage>
static NuGet.PackageManagement.NuGetPackageManager.GetLatestVersionAsync(string packageId, NuGet.Frameworks.NuGetFramework framework, NuGet.PackageManagement.ResolutionContext resolutionContext, System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.SourceRepository> sources, NuGet.Common.ILogger log, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<NuGet.PackageManagement.ResolvedPackage>
static NuGet.PackageManagement.PackageGraphAnalysisUtilities.GetDependencyInfoForPackageIdentitiesAsync(System.Collections.Generic.IEnumerable<NuGet.Packaging.Core.PackageIdentity> packageIdentities, NuGet.Frameworks.NuGetFramework nuGetFramework, NuGet.Protocol.Core.Types.DependencyInfoResource dependencyInfoResource, NuGet.Protocol.Core.Types.SourceCacheContext sourceCacheContext, bool includeUnresolved, NuGet.Common.ILogger logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Packaging.Core.PackageDependencyInfo>>
static NuGet.PackageManagement.Utility.PackagesConfigLockFileUtility.FromPackagesConfigFile(string pcFile, NuGet.Frameworks.NuGetFramework projectTfm, string packagesFolderPath, System.Threading.CancellationToken token) -> NuGet.ProjectModel.PackagesLockFile
static NuGet.PackageManagement.Utility.PackagesConfigLockFileUtility.ValidatePackagesConfigLockFiles(string projectFile, string packagesConfigFile, string projectName, string nuGetLockFilePath, string restorePackagesWithLockFile, NuGet.Frameworks.NuGetFramework projectTfm, string packagesFolderPath, bool restoreLockedMode, System.Threading.CancellationToken token) -> System.Collections.Generic.IReadOnlyList<NuGet.Common.IRestoreLogMessage>
static NuGet.ProjectManagement.JsonConfigUtility.AddFramework(Newtonsoft.Json.Linq.JObject json, NuGet.Frameworks.NuGetFramework framework) -> void
static NuGet.ProjectManagement.JsonConfigUtility.GetFrameworks(Newtonsoft.Json.Linq.JObject json) -> System.Collections.Generic.IEnumerable<NuGet.Frameworks.NuGetFramework>
static NuGet.ProjectManagement.MSBuildNuGetProjectSystemUtility.GetMostCompatibleGroup(NuGet.Frameworks.NuGetFramework projectTargetFramework, System.Collections.Generic.IEnumerable<NuGet.Packaging.FrameworkSpecificGroup> itemGroups) -> NuGet.Packaging.FrameworkSpecificGroup
