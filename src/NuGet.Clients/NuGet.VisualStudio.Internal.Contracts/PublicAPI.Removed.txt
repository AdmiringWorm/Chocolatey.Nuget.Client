NuGet.VisualStudio.Internal.Contracts.INuGetProjectManagerService.GetTargetFrameworksAsync(System.Collections.Generic.IReadOnlyCollection<string!>! projectIds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<NuGet.Frameworks.NuGetFramework!>!>
NuGet.VisualStudio.Internal.Contracts.IProjectMetadataContextInfo.SupportedFrameworks.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.Frameworks.NuGetFramework!>?
NuGet.VisualStudio.Internal.Contracts.IProjectMetadataContextInfo.TargetFramework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.PackageReferenceContextInfo.Framework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.PackageReferenceContextInfo.PackageReferenceContextInfo(NuGet.Packaging.Core.PackageIdentity! identity, NuGet.Frameworks.NuGetFramework? framework) -> void
NuGet.VisualStudio.Internal.Contracts.ProjectMetadataContextInfo.SupportedFrameworks.get -> System.Collections.Generic.IReadOnlyCollection<NuGet.Frameworks.NuGetFramework!>?
NuGet.VisualStudio.Internal.Contracts.ProjectMetadataContextInfo.TargetFramework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.Framework.get -> NuGet.Frameworks.NuGetFramework?
NuGet.VisualStudio.Internal.Contracts.TransitivePackageReferenceContextInfo.TransitivePackageReferenceContextInfo(NuGet.Packaging.Core.PackageIdentity! identity, NuGet.Frameworks.NuGetFramework? framework) -> void
